ggboxplot <- function(datos,X,Y,ejex,ejey) {
ggplot(data = datos,aes(x= factor(X),y=Y)) +
geom_boxplot(notch = T,fill = colores) + theme_classic() +
xlab(ejex) + ylab(ejey)}
read.delim("https://raw.githubusercontent.com/JosmenX10/Informe-final-de-multivariada/main/Base%20de%20datos%20y%20contextos/vltava_env.csv")
read.delim("https://raw.githubusercontent.com/JosmenX10/Informe-final-de-multivariada/main/Base%20de%20datos%20y%20contextos/vltava_env.csv",sep= ";")
read.delim("https://raw.githubusercontent.com/JosmenX10/Informe-final-de-multivariada/main/Base%20de%20datos%20y%20contextos/vltava_env.csv",sep= ";")
write.csv(datos_env,"vltava_env.csv")
datos_env <- read_xlsx("C:\\Users\\Asus\\Desktop\\Analisis multivariado\\Informe-final-de-multivariada\\Base de datos y contextos\\vltava.xlsx",
sheet = "Vltava-env data")
# Preparamos la base de datos ambientales
colnames(datos_env) = c("Parcela","Transecto","Elevación","Pendiente","Orientación SE",
"Orientación S-SE", "CCSE","CCS-SE","Superficie PD","Superficie ISO",
"Lítico","Esqueletico","Cambisoles","Fluvisoles","P.del suelo","pH",
"Cobertura veg.","Luz","Temperatura","Continentalidad","Humedad",
"Reactividad","Nutrientes","Riqueza sp","Grupos")
datos1 <- datos_env[,c("Parcela","Transecto","Elevación","Pendiente","Orientación SE",
"Orientación S-SE", "CCSE","CCS-SE","Superficie PD","Superficie ISO","P.del suelo","pH")]
datos2 <- datos_env[,c("Lítico","Esqueletico","Cambisoles","Fluvisoles", "Cobertura veg.","Luz","Temperatura","Continentalidad","Humedad",
"Reactividad","Nutrientes","Riqueza sp","Grupos")]
datos_env <- cbind(datos1,datos2)
write.csv(datos_env,"vltava_env.csv")
datos_env <- read_xlsx("C:\\Users\\Asus\\Desktop\\Analisis multivariado\\Informe-final-de-multivariada\\Base de datos y contextos\\vltava.xlsx",
sheet = "Vltava-env data")
#Cargamos la base de datos de vegetación.
library(readxl)
datos_env <- read_xlsx("C:\\Users\\Asus\\Desktop\\Analisis multivariado\\Informe-final-de-multivariada\\Base de datos y contextos\\vltava.xlsx",
sheet = "Vltava-env data")
# Preparamos la base de datos ambientales
colnames(datos_env) = c("Parcela","Transecto","Elevación","Pendiente","Orientación SE",
"Orientación S-SE", "CCSE","CCS-SE","Superficie PD","Superficie ISO",
"Lítico","Esqueletico","Cambisoles","Fluvisoles","P.del suelo","pH",
"Cobertura veg.","Luz","Temperatura","Continentalidad","Humedad",
"Reactividad","Nutrientes","Riqueza sp","Grupos")
datos1 <- datos_env[,c("Parcela","Transecto","Elevación","Pendiente","Orientación SE",
"Orientación S-SE", "CCSE","CCS-SE","Superficie PD","Superficie ISO","P.del suelo","pH")]
datos2 <- datos_env[,c("Lítico","Esqueletico","Cambisoles","Fluvisoles", "Cobertura veg.","Luz","Temperatura","Continentalidad","Humedad",
"Reactividad","Nutrientes","Riqueza sp","Grupos")]
datos_env <- cbind(datos1,datos2)
write.csv(datos_env,"vltava_env.csv")
write.csv(datos_env,"vltava_env.csv")
datos_bio <- read.delim("https://raw.githubusercontent.com/JosmenX10/Informe-final-de-multivariada/main/Base%20de%20datos%20y%20contextos/vltava_env.csv",sep= ";")
View(datos_bio)
datos_env <- read.delim("https://raw.githubusercontent.com/JosmenX10/Informe-final-de-multivariada/main/Base%20de%20datos%20y%20contextos/datos_bio.csv", sep =",")
datos_env <- read.delim("https://raw.githubusercontent.com/JosmenX10/Informe-final-de-multivariada/main/Base%20de%20datos%20y%20contextos/vltava_env.csv",sep= ";")
datos_bio <- read.delim("https://raw.githubusercontent.com/JosmenX10/Informe-final-de-multivariada/main/Base%20de%20datos%20y%20contextos/datos_bio.csv", sep =",")
dist_comunidad <- vegdist(datos_bio, method = "bray")
nmds <- metaMDS(dist_comunidad, k = 2, trymax = 100)
datos_env <- read.delim("https://raw.githubusercontent.com/JosmenX10/Informe-final-de-multivariada/main/Base%20de%20datos%20y%20contextos/vltava_env.csv",sep= ";")
datos_bio <- read.delim("https://raw.githubusercontent.com/JosmenX10/Informe-final-de-multivariada/main/Base%20de%20datos%20y%20contextos/datos_bio.csv", sep =",")
dist_comunidad <- vegdist(datos_bio, method = "bray")
#llamamos las librerias necesarias.
library(dplyr)
library(ade4)
library(adespatial)
library(vegan)
library(gclus)
library(cluster)
library(pvclust)
library(RColorBrewer)
datos_env <- read.delim("https://raw.githubusercontent.com/JosmenX10/Informe-final-de-multivariada/main/Base%20de%20datos%20y%20contextos/vltava_env.csv",sep= ";")
datos_bio <- read.delim("https://raw.githubusercontent.com/JosmenX10/Informe-final-de-multivariada/main/Base%20de%20datos%20y%20contextos/datos_bio.csv", sep =",")
dist_comunidad <- vegdist(datos_bio, method = "bray")
nmds <- metaMDS(dist_comunidad, k = 2, trymax = 100)
envfit_result <- envfit(nmds, datos_env[,c("Luz","Temperatura","Continentalidad","Humedad",
"Reactividad","Nutrientes")], permutations = 999)
colores <- c("#a6d96a","#ca0020", "#c2a5cf",
"#92c5de")
plot(nmds, type = "n")
ordispider(nmds,factor(datos_env$Grupos), col = colores)
points(nmds, display = "sites", col = colores[as.numeric(datos_env$Grupos)], pch = 16)
plot(envfit_result, p.max = 0.05, col = "black")  # Solo muestra vectores significativos
legend("topleft", title="Tipo de vegetación",
c("1","2","3","4"), fill=colores, horiz=FALSE, cex=.9) # adicionar leyenda
plot(nmds, type = "n")
ordispider(nmds,factor(datos_env$Grupos), col = colores)
points(nmds, display = "sites", col = colores[as.numeric(datos_env$Grupos)], pch = 16)
plot(envfit_result, p.max = 0.05, col = "black")  # Solo muestra vectores significativos
View(datos_env)
write.csv(datos_env,"vltava_env.csv")
getwd()
setwd(choose.dir())
datos <- read_xlsx("C:\\Users\\Asus\\Desktop\\Analisis multivariado\\Informe-final-de-multivariada\\Base de datos y contextos\\vltava.xlsx",
sheet = "Vltava-species")
#Se transpone la base de datos dejando las parcelas como filas
datos_bio <- datos[,-1]
datos_bio <- t(datos_bio)
colnames(datos_bio) <- datos$...1
write.csv(datos_bio,file = "datos_bio.csv")
datos_env <- read_xlsx("C:\\Users\\Asus\\Desktop\\Analisis multivariado\\Informe-final-de-multivariada\\Base de datos y contextos\\vltava.xlsx",
sheet = "Vltava-env data")
# Preparamos la base de datos ambientales
colnames(datos_env) = c("Parcela","Transecto","Elevación","Pendiente","Orientación SE",
"Orientación S-SE", "CCSE","CCS-SE","Superficie PD","Superficie ISO",
"Lítico","Esqueletico","Cambisoles","Fluvisoles","P.del suelo","pH",
"Cobertura veg.","Luz","Temperatura","Continentalidad","Humedad",
"Reactividad","Nutrientes","Riqueza sp","Grupos")
datos1 <- datos_env[,c("Parcela","Transecto","Elevación","Pendiente","Orientación SE",
"Orientación S-SE", "CCSE","CCS-SE","Superficie PD","Superficie ISO","P.del suelo","pH")]
datos2 <- datos_env[,c("Lítico","Esqueletico","Cambisoles","Fluvisoles", "Cobertura veg.","Luz","Temperatura","Continentalidad","Humedad",
"Reactividad","Nutrientes","Riqueza sp","Grupos")]
datos_env <- cbind(datos1,datos2)
write.csv(datos_env,"vltava_env.csv")
View(datos_env)
datos_env <- read.delim("https://raw.githubusercontent.com/JosmenX10/Informe-final-de-multivariada/main/Base%20de%20datos%20y%20contextos/vltava_env.csv,sep"= ";")
datos_bio <- read.delim("https://raw.githubusercontent.com/JosmenX10/Informe-final-de-multivariada/main/Base%20de%20datos%20y%20contextos/datos_bio.csv", sep =",")
dist_comunidad <- vegdist(datos_bio, method = "bray")
nmds <- metaMDS(dist_comunidad, k = 2, trymax = 100)
envfit_result <- envfit(nmds, datos_env[,c("Luz","Temperatura","Continentalidad","Humedad",
"Reactividad","Nutrientes")], permutations = 999)
colores <- c("#a6d96a","#ca0020", "#c2a5cf",
"#92c5de")
plot(nmds, type = "n")
ordispider(nmds,factor(datos_env$Grupos), col = colores)
points(nmds, display = "sites", col = colores[as.numeric(datos_env$Grupos)], pch = 16)
plot(envfit_result, p.max = 0.05, col = "black")  # Solo muestra vectores significativos
View(datos_bio)
View(datos_bio)
datos_bio <- datos_bio[,-1]
dist_comunidad <- vegdist(datos_bio, method = "bray")
nmds <- metaMDS(dist_comunidad, k = 2, trymax = 100)
envfit_result <- envfit(nmds, datos_env[,c("Luz","Temperatura","Continentalidad","Humedad",
"Reactividad","Nutrientes")], permutations = 999)
colores <- c("#a6d96a","#ca0020", "#c2a5cf",
"#92c5de")
plot(nmds, type = "n")
ordispider(nmds,factor(datos_env$Grupos), col = colores)
points(nmds, display = "sites", col = colores[as.numeric(datos_env$Grupos)], pch = 16)
plot(envfit_result, p.max = 0.05, col = "black")  # Solo muestra vectores significativos
legend("topleft", title="Tipo de vegetación",
c("1","2","3","4"), fill=colores, horiz=FALSE, cex=.9) # adicionar leyenda
library(ggplot2)
ggboxplot <- function(datos,X,Y,ejex,ejey) {
ggplot(data = datos,aes(x= factor(X),y=Y)) +
geom_boxplot(notch = T,fill = colores) + theme_classic() +
xlab(ejex) + ylab(ejey)}
x11()
attach(datos_env)
ggboxplot(datos=datos_env,X = Grupos,
Y = Elevación,ejex = "Grupos",ejey="Elevación(m.s.n.m)")
ggboxplot(datos=datos_env,X = Grupos,
Y = Pendiente,ejex = "Grupos",ejey="Pendiente")
ggboxplot(datos=datos_env,X = Grupos, Y = `Cobertura veg.`,
ejex = "Grupos",ejey="Cobertura vegetal")
ggboxplot(datos=datos_env,X = Grupos,
Y = `Riqueza sp` ,ejex = "Grupos", ejey="Riqueza de especies")
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$pH ,ejex = "Grupos", ejey="pH")
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$`P.del suelo`,ejex = "Grupos", ejey="Orientación SE")
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$`Orientación S-SE` ,ejex = "Grupos", ejey="Orientación S-SE")
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$CCSE ,ejex = "Grupos", ejey="Orientación S-SE")+scale_y_continuous(limits = c(0,1.5))
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$`CCS-SE` ,ejex = "Grupos", ejey="Orientación S-SE")+scale_y_continuous(limits = c(0,1.5))
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$CCSE ,ejex = "Grupos", ejey="Orientación S-SE")+scale_y_continuous(limits = c(0,1.5))
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$`CCS-SE` ,ejex = "Grupos", ejey="Orientación S-SE")+scale_y_continuous(limits = c(0,1.5))
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$CCSE ,ejex = "Grupos", ejey="Orientación S-SE")+scale_y_continuous(limits = c(0,1.5))
plot(nmds, type = "n")
ordispider(nmds,factor(datos_env$Grupos), col = colores)
points(nmds, display = "sites", col = colores[as.numeric(datos_env$Grupos)], pch = 16)
plot(envfit_result, p.max = 0.05, col = "black")  # Solo muestra vectores significativos
x11()
plot(nmds, type = "n")
ordispider(nmds,factor(datos_env$Grupos), col = colores)
points(nmds, display = "sites", col = colores[as.numeric(datos_env$Grupos)], pch = 16)
plot(envfit_result, p.max = 0.05, col = "black")  # Solo muestra vectores significativos
legend("topleft", title="Tipo de vegetación",
c("1","2","3","4"), fill=colores, horiz=FALSE, cex=.9) # adicionar leyenda
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$CCSE ,ejex = "Grupos", ejey="Orientación S-SE")+scale_y_continuous(limits = c(0,1.5))
x11()
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$`CCS-SE` ,ejex = "Grupos", ejey="Orientación S-SE")+scale_y_continuous(limits = c(0,1.5))
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$`P.del suelo`,ejex = "Grupos", ejey="Profundidad del suelo")
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$`Orientación S-SE` ,ejex = "Grupos", ejey="Orientación S-SE")
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$CCSE ,ejex = "Grupos", ejey="Indice de carga calorifica -SE")+scale_y_continuous(limits = c(0,1.5))
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$`CCS-SE` ,ejex = "Grupos", ejey="Orientación S-SE")+scale_y_continuous(limits = c(0,1.5))
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$CCSE ,ejex = "Grupos", ejey="Indice de carga calorifica SE")+scale_y_continuous(limits = c(0,1.5))
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$`CCS-SE` ,ejex = "Grupos", ejey="Indice de carga calorifica S-SE")+scale_y_continuous(limits = c(0,1.5))
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$CCSE ,ejex = "Grupos", ejey="Indice de carga calorifica SE")+scale_y_continuous(limits = c(0,1.5))
x11()
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$`CCS-SE` ,ejex = "Grupos", ejey="Indice de carga calorifica S-SE")+scale_y_continuous(limits = c(0,1.5))
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$CCSE ,ejex = "Grupos", ejey="Indice de carga calorifica SE")+scale_y_continuous(limits = c(0,1.5))
x11()
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$`CCS-SE` ,ejex = "Grupos", ejey="Indice de carga calorifica S-SE")+scale_y_continuous(limits = c(0,1.5))
x11()
ggboxplot(datos=datos_env,X = Grupos,
Y = datos_env$CCSE ,ejex = "Grupos", ejey="Indice de carga calorifica SE")+scale_y_continuous(limits = c(0,1.5))
#Generamos las matrices de correlación para analisis
topocor <- cor(topo, method = "spearman") #correlación entre topograficas.
pval_topo <- corr.test(topo, adjust="none",method = "spearman")$p #p-value de correlaciones entre topograficas.
ellin_topocor <- cor(y = topo, x = ellin, method = "spearman") #correlación entre topograficas.
pval_ellin<- corr.test(y= topo, x= ellin, adjust="none",method = "spearman")$p #p-value de correlaciones entre topograficas.
corrplot.mixed(topocor, lower = 'number', upper = 'ellipse', order = "original",
lower.col = "black", tl.pos = "lt",tl.col = "black",sig.level = c(0.001,0.01,0.05),
p.mat = pval_topo, insig = c("label_sig"), pch= "*",pch.cex = 1, pch.col ="black"
,tl.cex = 0.9,number.cex = 0.45)
corrplot(topocor, add = TRUE, type = 'lower', method = 'number', order = 'original',
col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n', number.cex = 0.45,
p.mat = pval_topo, insig = c("pch"), pch= "_",pch.cex = 1.5, pch.col ="red")
datos_env = read.delim("https://raw.githubusercontent.com/JosmenX10/Informe-final-de-multivariada/main/Base%20de%20datos%20y%20contextos/vltava_env.csv,sep"= ";")
ggboxplot <- function(datos,X,Y,ejex,ejey) {
ggplot(data = datos,aes(x= factor(X),y=Y)) +
geom_boxplot(notch = T,fill = colores) + theme_classic() +
xlab(ejex) + ylab(ejey)}
x11()
attach(datos_env)
ggboxplot(datos=datos_env,X = Grupos,
Y = Elevación,ejex = "Grupos",ejey="Elevación(m.s.n.m)")
ggboxplot(datos=datos_env,X = Grupos,
Y = Pendiente,ejex = "Grupos",ejey="Pendiente")
#Llamamos a las librerias necesarias
library(psych)
library(readxl)
library(ellipse)
library(corrplot)
library(Hmisc)
datos_env <- read.delim("https://raw.githubusercontent.com/JosmenX10/Informe-final-de-multivariada/main/Base%20de%20datos%20y%20contextos/vltava_env.csv,sep"= ";")
#Seleccionamos entre grupos de variables
topo <- datos[,3:16]#Seleccionamos solamente las variables topograficas y de suelo.
ellin <- datos[,18:23]#seleccionamos solo las variables indices-ellinger.
#Generamos las matrices de correlación para analisis
topocor <- cor(topo, method = "spearman") #correlación entre topograficas.
pval_topo <- corr.test(topo, adjust="none",method = "spearman")$p #p-value de correlaciones entre topograficas.
ellin_topocor <- cor(y = topo, x = ellin, method = "spearman") #correlación entre topograficas.
pval_ellin<- corr.test(y= topo, x= ellin, adjust="none",method = "spearman")$p #p-value de correlaciones entre topograficas.
corrplot.mixed(topocor, lower = 'number', upper = 'ellipse', order = "original",
lower.col = "black", tl.pos = "lt",tl.col = "black",sig.level = c(0.001,0.01,0.05),
p.mat = pval_topo, insig = c("label_sig"), pch= "*",pch.cex = 1, pch.col ="black"
,tl.cex = 0.9,number.cex = 0.45)
corrplot(topocor, add = TRUE, type = 'lower', method = 'number', order = 'original',
col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n', number.cex = 0.45,
p.mat = pval_topo, insig = c("pch"), pch= "_",pch.cex = 1.5, pch.col ="red")
View(datos_env)
#Seleccionamos entre grupos de variables
topo <- datos[,3:16]#Seleccionamos solamente las variables topograficas y de suelo.
ellin <- datos[,18:23]#seleccionamos solo las variables indices-ellinger.
View(topo)
datos_env <- read.delim("https://raw.githubusercontent.com/JosmenX10/Informe-final-de-multivariada/main/Base%20de%20datos%20y%20contextos/vltava_env.csv,sep"= ";")
View(datos_env)
View(datos_bio)
#Seleccionamos entre grupos de variables
topo <- datos_env[,3:16]#Seleccionamos solamente las variables topograficas y de suelo.
ellin <- datos_env[,18:23]#seleccionamos solo las variables indices-ellinger.
#Generamos las matrices de correlación para analisis
topocor <- cor(topo, method = "spearman") #correlación entre topograficas.
pval_topo <- corr.test(topo, adjust="none",method = "spearman")$p #p-value de correlaciones entre topograficas.
ellin_topocor <- cor(y = topo, x = ellin, method = "spearman") #correlación entre topograficas.
pval_ellin<- corr.test(y= topo, x= ellin, adjust="none",method = "spearman")$p #p-value de correlaciones entre topograficas.
corrplot.mixed(topocor, lower = 'number', upper = 'ellipse', order = "original",
lower.col = "black", tl.pos = "lt",tl.col = "black",sig.level = c(0.001,0.01,0.05),
p.mat = pval_topo, insig = c("label_sig"), pch= "*",pch.cex = 1, pch.col ="black"
,tl.cex = 0.9,number.cex = 0.45)
corrplot(topocor, add = TRUE, type = 'lower', method = 'number', order = 'original',
col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n', number.cex = 0.45,
p.mat = pval_topo, insig = c("pch"), pch= "_",pch.cex = 1.5, pch.col ="red")
#Topografico vs ellinberg
corrplot(ellin_topocor,method = "ellipse",
tl.pos = "l",tl.col = "black",sig.level = c(0.001,0.01,0.05),
p.mat = pval_ellin, insig = c("label_sig"), pch= "*",pch.cex = 1.5, pch.col ="black"
,tl.cex = 0.9, number.cex = 0.9,addgrid.col = "#f5f5f5")
corrplot(ellin_topocor,  method = "number",
col = 'black', tl.pos = "l",tl.col = "black", cl.pos = 'n', number.cex = 0.9,
p.mat = pval_ellin, insig = c("pch"), pch= "_",pch.cex = 1.5, pch.col ="red",
tl.cex = 0.9)
#segundo grafico
x11()
corrplot(topocor,method = "ellipse",type ="lower",diag = FALSE,
tl.pos = "ld",order ="original",tl.col = "black",addCoef.col= NULL, cl.pos = T, sig.level = c(0.001,0.01,0.05),
p.mat = pval_topo,insig = c("label_sig"), pch= "*",pch.cex = 1.0, pch.col ="black",
tl.cex = 1.0, number.cex = 0.9, tl.srt = 90,addgrid.col = "#f5f5f5")
corrplot(ellin_topocor,method = "ellipse",
tl.pos = "dt",tl.col = "black",sig.level = c(0.001,0.01,0.05),
p.mat = pval_ellin, insig = c("label_sig"), pch= "*",pch.cex = 1.0, pch.col ="black"
,tl.cex = 1.5, number.cex = 0.9,addgrid.col = "#f5f5f5")
View(pval_topo)
attach(datos_env)
plot(lm(x = CCSE, y =`Riqueza sp`))
plot(lm(CCSE ~ `Riqueza sp`))
points(lm(CCSE ~ `Riqueza sp`))
par(lm(CCSE ~ `Riqueza sp`))
#Topografico vs ellinberg
corrplot(ellin_topocor,method = "ellipse",
tl.pos = "l",tl.col = "black",sig.level = c(0.001,0.01,0.05),
p.mat = pval_ellin, insig = c("label_sig"), pch= "*",pch.cex = 1.5, pch.col ="black"
,tl.cex = 0.9, number.cex = 0.9,addgrid.col = "#f5f5f5")
corrplot(ellin_topocor,  method = "number",
col = 'black', tl.pos = "l",tl.col = "black", cl.pos = 'n', number.cex = 0.9,
p.mat = pval_ellin, insig = c("pch"), pch= "_",pch.cex = 1.5, pch.col ="red",
tl.cex = 0.9)
#segundo grafico
x11()
corrplot(topocor,method = "ellipse",type ="lower",diag = FALSE,
tl.pos = "ld",order ="original",tl.col = "black",addCoef.col= NULL, cl.pos = T, sig.level = c(0.001,0.01,0.05),
p.mat = pval_topo,insig = c("label_sig"), pch= "*",pch.cex = 1.0, pch.col ="black",
tl.cex = 1.0, number.cex = 0.9, tl.srt = 90,addgrid.col = "#f5f5f5")
x11()
corrplot(ellin_topocor,method = "ellipse",
tl.pos = "dt",tl.col = "black",sig.level = c(0.001,0.01,0.05),
p.mat = pval_ellin, insig = c("label_sig"), pch= "*",pch.cex = 1.0, pch.col ="black"
,tl.cex = 1.5, number.cex = 0.9,addgrid.col = "#f5f5f5")
ggpoint <- function(X,Y,grupo) {ggplot(datos,aes(x = X,y = Y)) +
geom_point(aes(color = grupo), size = 3) +
geom_smooth(method= "lm", se = F) +
theme_classic()}
attach(datos_env)
ggpoint(X = CCS-SE, Y = Humedad, grupo = Grupos)
attach(datos_env)
ggpoint(X = CCS-SE, Y = Humedad, grupo = Grupos)
ggpoint(X = `CCS-SE`, Y = Humedad, grupo = Grupos)
attach(datos_env)
ggpoint(X = `CCS-SE`, Y = Humedad, grupo = Grupos)
ggpoint(X = `CCS-SE`, Y = Humedad, grupo = Grupos)
ggpoint <- function(X,Y,grupo) {ggplot(datos,aes(x = X,y = Y)) +
geom_point(color = grupo, size = 3) +
geom_smooth(method= "lm", se = F) +
theme_classic()}
attach(datos_env)
ggpoint(X = `CCS-SE`, Y = Humedad, grupo = Grupos)
ggpoint <- function(X,Y) {ggplot(datos,aes(x = X,y = Y)) +
geom_point( size = 3) +
geom_smooth(method= "lm", se = F) +
theme_classic()}
attach(datos_env)
ggpoint(X = `CCS-SE`, Y = Humedad)
ggpoint <- function(datos,X,Y) {ggplot(data = datos,aes(x = X,y = Y)) +
geom_point( size = 3) +
geom_smooth(method= "lm", se = F) +
theme_classic()}
attach(datos_env)
ggpoint(datos_env,X = `CCS-SE`, Y = Humedad)
ggpoint <- function(datos,X,Y,grupo) {ggplot(data = datos,aes(x = X,y = Y)) +
geom_point(aes(color = grupo),size = 3) +
geom_smooth(method= "lm", se = F) +
theme_classic()}
attach(datos_env)
ggpoint(datos_env,X = `CCS-SE`, Y = Humedad,grupo =Grupos)
ggpoint <- function(datos,X,Y,grupo) {ggplot(data = datos,aes(x = X,y = Y)) +
geom_smooth(method= "lm", se = F) +
attach(datos_env)
ggpoint(datos_env,X = `CCS-SE`, Y = Humedad,grupo = Grupos)
)
ggpoint(datos_env,X = `CCS-SE`, Y = Humedad,grupo = Grupos)
ggpoint <- function(datos,X,Y,grupo) {ggplot(data = datos,aes(x = X,y = Y)) +
geom_point(aes(color = factor(grupo),size = 3)) +
geom_smooth(method= "lm", se = F) +
theme_classic()}
attach(datos_env)
ggpoint(datos_env,X = `CCS-SE`, Y = Humedad,grupo = Grupos)
ggpoint <- function(datos,X,Y,grupo) {ggplot(data = datos,aes(x = X,y = Y)) +
geom_point(aes(color = factor(grupo),size = 3)) +
geom_smooth(method= "glm", se = F) +
theme_classic()}
attach(datos_env)
ggpoint(datos_env,X = `CCS-SE`, Y = Humedad,grupo = Grupos)
ggpoint <- function(datos,X,Y,grupo) {ggplot(data = datos,aes(x = X,y = Y)) +
geom_point(aes(color = factor(grupo)),size = 3) +
geom_smooth(method= "glm", se = F) +
theme_classic()}
attach(datos_env)
ggpoint(datos_env,X = `CCS-SE`, Y = Humedad,grupo = Grupos)
text(datos_env$Lítico)
text(datos_env$Lítico)
text(Lítico)
text(Lítico)
expression(Datos)
expression(Datos)
expression(1/4)
expression(1/4)
ggpoint(datos_env,X = `CCS-SE`, Y = Humedad,grupo = Grupos)
colnames(colores)
names(colores)
text(colores)
ggpoint(datos_env,X = `CCS-SE`, Y = Humedad,grupo = Grupos,ejex="CCS-SE",ejey ="EIV - Humedad")
ggpoint <- function(datos,X,Y,grupo,ejex,ejey) {ggplot(data = datos,aes(x = X,y = Y)) +
geom_point(aes(color = factor(grupo)),size = 3) +
geom_smooth(method= "glm", se = F) +
theme_classic()+xlab(ejex) + ylab(ejey)}
attach(datos_env)
ggpoint(datos_env,X = `CCS-SE`, Y = Humedad,grupo = Grupos,ejex="CCS-SE",ejey ="EIV - Humedad")
ggpoint <- function(datos,X,Y,grupo,ejex,ejey) {ggplot(data = datos,aes(x = X,y = Y)) +
geom_point(aes(color = factor(grupo)),size = 3) +
geom_smooth(method= "glm", se = F) +
theme_classic()+xlab(ejex) + ylab(ejey) + labs(color = Tipo de vegetación)}
attach(datos_env)
ggpoint(datos_env,X = `CCS-SE`, Y = Humedad,grupo = Grupos,ejex="CCS-SE",ejey ="EIV - Humedad")
ggpoint <- function(datos,X,Y,grupo,ejex,ejey) {ggplot(data = datos,aes(x = X,y = Y)) +
geom_point(aes(color = factor(grupo)),size = 3) +
geom_smooth(method= "glm", se = F) +
theme_classic()+xlab(ejex) + ylab(ejey) + labs(color = Tipo de vegetación)}
attach(datos_env)
ggpoint(datos_env,X = `CCS-SE`, Y = Humedad,grupo = Grupos,ejex="CCS-SE",ejey ="EIV - Humedad")
ggpoint(datos_env,X = `CCS-SE`, Y = Humedad,grupo = Grupos,ejex="CCS-SE",ejey ="EIV - Humedad",
grupolab = "Tipo de vegetación")
ggpoint <- function(datos,X,Y,grupo,ejex,ejey,grupolab) {ggplot(data = datos,aes(x = X,y = Y)) +
geom_point(aes(color = factor(grupo)),size = 3) +
geom_smooth(method= "glm", se = F) +
theme_classic()+xlab(ejex) + ylab(ejey) + labs(color = grupolab)}
attach(datos_env)
ggpoint(datos_env,X = `CCS-SE`, Y = Humedad,grupo = Grupos,ejex="CCS-SE",ejey ="EIV - Humedad",
grupolab = "Tipo de vegetación")
ggpoint(datos_env,X = `CCS-SE`, Y = Humedad,grupo = Grupos,ejex="CCS-SE",ejey ="EIV - Humedad",
grupolab = "Tipo de vegetación") + scale_x_continuous(limits = c(-2.5,3))
ggpoint(datos_env,X = `CCS-SE`, Y = Humedad,grupo = Grupos,ejex="CCS-SE",ejey ="EIV - Humedad",
grupolab = "Tipo de vegetación")
ggpoint(datos_env,X = `CCS-SE`, Y = Humedad,grupo = Grupos,ejex="CCS-SE",ejey ="EIV - Humedad",
grupolab = "Tipo de vegetación") + scale_x_continuous(limits = c(-2.5,3))
